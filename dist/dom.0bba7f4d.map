{"version":3,"sources":["dom.js"],"names":["window","dom","create","htmlString","container","document","createElement","innerHTML","trim","content","firstChild","after","node","insertNode","parentNode","insertBefore","nextSibling","before","append","childNode","appendChild","wrap","remove","removeChild","empty","childArray","first","push","attr","key","value","arguments","length","getAttribute","setAttribute","text","innerText","textContent","html","htmlText","style","name","Object","class","add","className","classList","has","contains","on","eventClass","fn","addEventListener","off","removeEventListener","find","selector","querySelectorAll","parent","children","siblings","Array","from","filter","n","next","nextElementSibling","previous","previousElementSibling","each","nodes","i","call","index","childrens"],"mappings":"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","file":"dom.0bba7f4d.map","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n    // 创捷节点\r\n    create(htmlString){\r\n        const container = document.createElement('template');\r\n        container.innerHTML = htmlString.trim();\r\n        return container.content.firstChild;\r\n    },\r\n    // 在节点之后添加节点\r\n    after(node,insertNode){\r\n        // 调用当前元素的父元素的insertBefore方法将元素插在当前元素的后一个之前\r\n        // 即在他后方插入一个\r\n        node.parentNode.insertBefore(insertNode,node.nextSibling)\r\n    },\r\n    // 在节点之前添加节点\r\n    before(node,insertNode){\r\n        node.parentNode.insertBefore(insertNode,node)\r\n    },\r\n    // 在当前节点的最后添加一个子节点\r\n    append(parentNode,childNode){\r\n        parentNode.appendChild(childNode)\r\n    },\r\n    // 为当前节点添加一个父节点\r\n    wrap(node,parentNode){\r\n        dom.before(node,parentNode)\r\n        // parentNode.appendChild(node)\r\n        dom.append(parentNode,node)\r\n    },\r\n    // 删除当前节点\r\n    remove(node){\r\n        // tip：可以考虑是否保留当前节点中的元素\r\n        // console.log(arguments[0],arguments[1]);\r\n        node.parentNode.removeChild(node);\r\n        return node;\r\n    },\r\n    // 清空节点后代节点\r\n    empty(node){\r\n        const childArray = [];\r\n        // 方式一：\r\n        // const childNodes  = node.children;\r\n        // for(let i = 0;;){\r\n        //     if(childNodes[i]===undefined){\r\n        //         break;\r\n        //     }\r\n        //     childArray.push(childNodes[i])\r\n        //     dom.remove(childNodes[i]);\r\n        // }\r\n\r\n        // 方式二：\r\n        let first = node.firstChild \r\n        while(first){\r\n            childArray.push(dom.remove(first));\r\n            first = node.firstChild;\r\n        }\r\n        return childArray;\r\n    },\r\n    // 修改指定节点的指定元素\r\n    attr(node,key,value){\r\n        if(arguments.length === 2){ // 不穿value就获取属性值\r\n            return node.getAttribute(key)\r\n        }else{ // 传递value就设置属性值\r\n            node.setAttribute(key,value);\r\n        }\r\n    },\r\n    // 读写节点中的文本内容\r\n    text(node,text){\r\n        // 没有传值就获取text\r\n        if(arguments.length === 1){\r\n            return 'innerText' in node ? node.innerText : node.textContent;\r\n        }else{\r\n            // 判断当前节点中有没有innerText属性\r\n            'innerText' in node ? node.innerText = text : node.textContent = text;\r\n        }\r\n    },\r\n    // 读写节点中的html内容\r\n    html(node, htmlText){\r\n        if(arguments.length === 1){\r\n            return node.innerHTML;\r\n        }else{\r\n            node.innerHTML = htmlText;\r\n        }\r\n    },\r\n    // 读写节点的style\r\n    style(node, name, value){\r\n        if(arguments.length === 3){\r\n            // dom.style(node,'background',value)\r\n            node.style[name] = value;\r\n        }else if(arguments.length === 2){\r\n            if(typeof name === 'string'){\r\n                // dom.style(node,'background')\r\n                return node.style[name]\r\n            }else if(name instanceof Object){\r\n                for(let key in name){\r\n                    // style.[key] 使用变量key的值\r\n                    // dom.style(node,{background:'red',color:'green'})\r\n                    node.style[key] = name[key];\r\n                }\r\n            }\r\n        }\r\n    },\r\n    class:{\r\n        // 给节点追加样式\r\n        add(node,className){\r\n            node.classList.add(className);\r\n        },\r\n        // 删除节点样式\r\n        remove(node,className){\r\n            node.classList.remove(className);\r\n        },\r\n        // 查找是否存在样式\r\n        has(node,className){\r\n            return node.classList.contains(className);\r\n        }\r\n    },\r\n    // 添加监听\r\n    on(node, eventClass, fn){\r\n        node.addEventListener(eventClass,fn);\r\n    },\r\n    // 移除监听\r\n    off(node, eventClass, fn){\r\n        node.removeEventListener(eventClass,fn);\r\n    },\r\n    find(selector,node){\r\n        // 指定查找范围\r\n        // if(arguments.length === 2){\r\n        //     return node.querySelectorAll(selector);\r\n        // }else if(arguments.length === 1){ // 未指定查找范围\r\n        //     return document.querySelectorAll(selector);\r\n        // }\r\n        \r\n        // 短路或运算,如果node有值就使用node，否则就使用document，查找第一个为真的，找不到就返回最后一个表达式\r\n        return (node || document).querySelectorAll(selector);\r\n    },\r\n    // 获取节点的父亲\r\n    parent(node){\r\n        return node.parentNode;\r\n    },\r\n    // 获取节点的孩子\r\n    children(node){\r\n        return node.children;\r\n    },\r\n    // 获取兄弟姐妹\r\n    siblings(node){\r\n        // 使用from变成数组，然后进行过滤\r\n        return Array.from(node.parentNode.children).filter(n => n!==node)\r\n    },\r\n    // 获取下一个节点\r\n    next(node){\r\n        return node.nextElementSibling;\r\n    },\r\n    // 获取上一个节点\r\n    previous(node){\r\n        return node.previousElementSibling;\r\n    },\r\n    // 遍历\r\n    each(nodes,fn){\r\n        // Array.from(nodes).forEach(fn);\r\n        for(let i = 0; i < nodes.length; i++){\r\n            // 使用数组元素调用fn,this为传入的每个节点\r\n            fn.call(nodes[i],nodes[i]);\r\n        }\r\n    },\r\n    index(node){\r\n        // 获取他父亲的儿子列表\r\n        const childrens = dom.children(dom.parent(node));\r\n        for(let i = 0;i < childrens.length; i++){\r\n            if(childrens[i]===node){\r\n                return i+1;\r\n            }\r\n        }\r\n    }\r\n};"]}